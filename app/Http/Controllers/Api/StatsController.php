<?phpnamespace Nexo\Http\Controllers\Api;use Auth;use App;use Hashids;use Lang;use Carbon\Carbon;use Illuminate\Http\Request;use Nexo\Entities\Team;use Nexo\Entities\PollAnswerOption;use Nexo\Entities\PollOption;use Nexo\Http\Controllers\Api\ApiResponse;use Nexo\Http\Requests;use Nexo\Http\Controllers\Controller;use Nexo\Repositories\ServiceRepository;use Nexo\Repositories\ServiceStatusRepository;use Nexo\Repositories\ServiceTypeRepository;/** * Class StatsController * @package Nexo\Http\Controllers\Api */class StatsController extends Controller{    use ApiResponse;    /**     *     */    const INTERVAL_CONFIGURATION = [        'day' => [            'interval' => 'D',            'short' => 'z',            'format' => '%d %b, %Y',            'format_short' => '%d %b'        ],        'week' => [            'interval' => 'W',            'short' => 'W',            'format' => '#%U - %b, %Y',            'format_short' => '%U'        ],        'month' => [            'interval' => 'M',            'short' => 'n',            'format' => '%b, %Y',            'format_short' => '%b'        ]    ];    /**     * StatsController constructor.     * @param ServiceRepository $serviceRepository     * @param ServiceStatusRepository $serviceStatusRepository     */    public function __construct(ServiceRepository $serviceRepository, ServiceStatusRepository $serviceStatusRepository)    {        $this->serviceRepository = $serviceRepository;        $this->serviceStatusRepository = $serviceStatusRepository;        setlocale(LC_ALL, 'es_ES');    }    /**     * @param Request $request     * @return mixed     */    public function servicesByStatus(Request $request)    {        $team = $this->getTeam($request);        $from = new Carbon($request->get('from'));        $to = new Carbon($request->get('to'));        $groupBy = $request->get('group');        $statuses = $this->serviceStatusRepository->all();        $intervalConfiguration = self::INTERVAL_CONFIGURATION[$groupBy];        setLang();               $dates = collect([]);        $categories = [];        $series = [            'categories' => [],            'data' => []        ];        $table = [            'columns' => [                [                    'field' => 'date',                    'title' => Lang::get('app.FECHA'),                    'width' => 220,                    'locked' => true                ]            ],            'data' => []        ];        $period = new \DatePeriod($from, new \DateInterval("P1{$intervalConfiguration['interval']}"), $to);        foreach ($period as $periodDate) {            if($groupBy == 'week'){                $format = Lang::get('app.SEMANA').' '.$intervalConfiguration['format'];                $formatShort = Lang::get('app.SEMANA').' '.$intervalConfiguration['format'];                }                        $periodDateName = ucfirst(strftime($format, $periodDate->timestamp));            $periodDateNameShort = ucfirst(strftime($formatShort, $periodDate->timestamp));            $dates->push([                'label' => $periodDateName,                'label_short' => $periodDateNameShort,                'date' => $periodDate->format('Y-m-d'),                'short' => $periodDate->format($intervalConfiguration['short'])            ]);            $categories[] = $periodDateName;        }        $services = $team->services()            ->select('service_status_id as status_id')            ->selectRaw('COUNT(services.id) as counter')            ->selectRaw("DATE_FORMAT(services.created_at,'%Y-%m-%d') as date")            ->selectRaw("DAYOFYEAR(services.created_at) as day")            ->selectRaw("WEEK(services.created_at) as week")            ->selectRaw("MONTH(services.created_at) as month")            ->whereBetween('created_at', [$from->toDateString(), $to->toDateString()])            ->groupBy('status_id', $groupBy)            ->orderBy('date')            ->get();        // Iterando las fechas para crear el data de la tabla        $dates->each(function ($date, $key) use (&$table, &$series, $statuses, $services, $groupBy) {            $valueToFilter = (int)$date['short'];            $servicesFiltered = $services->where($groupBy, $valueToFilter);            $data = [                'id' => $key,                'date' => $date['label']            ];            $statuses->each(function ($status) use (&$data, &$series, $servicesFiltered) {                $servicesStatusFiltered = $servicesFiltered->where('status_id', $status->id);                $data[camel_case($status->slug)] = $servicesStatusFiltered->sum('counter');            });            $table['data'][] = $data;            // Agregando categoría a series            $series['categories'][] = $date['label_short'];        });        // Creando el data de series        $statuses->each(function ($status) use ($dates, &$table, &$series, $services, $groupBy) {            $servicesFiltered = $services->where('status_id', $status->id);            if (!$servicesFiltered->isEmpty()) {                $series['data'][] = [                    'name' => Lang::get('app.'.$status->slug),                    'color' => $status->color,                    'data' => $dates->map(function ($date) use ($status, $servicesFiltered, $groupBy) {                        $valueToFilter = (int)$date['short'];                        return $servicesFiltered->where($groupBy, $valueToFilter)->sum('counter');                    })                ];                // Agregando columna a la tabla                $table['columns'][] = [                    'title' => Lang::get('app.'.$status->slug),                    'field' => camel_case($status->slug),                    'width' => 200,                ];            }        });        return $this->response->array([            'table' => $table,            'series' => $series        ]);    }    /**     * @param Request $request     * @return mixed     */    public function servicesByUsers(Request $request)    {        $team = $this->getTeam($request);        $from = new Carbon($request->get('from'));        $to = new Carbon($request->get('to'));        $groupBy = $request->get('group');        $intervalConfiguration = self::INTERVAL_CONFIGURATION[$groupBy];        setLang();        $dates = collect([]);        $categories = [];        $series = [            'categories' => [],            'data' => collect([])        ];        $table = [            'columns' => collect([                [                    'field' => 'date',                    'title' => Lang::get('app.FECHA'),                    'width' => 220,                    'locked' => true                ]            ]),            'data' => []        ];        $period = new \DatePeriod($from, new \DateInterval("P1{$intervalConfiguration['interval']}"), $to);        foreach ($period as $periodDate) {            if($groupBy == 'week'){                $format = Lang::get('app.SEMANA').' '.$intervalConfiguration['format'];                $formatShort = Lang::get('app.SEMANA').' '.$intervalConfiguration['format'];                }            $periodDateName = ucfirst(strftime($format, $periodDate->timestamp));            $periodDateNameShort = ucfirst(strftime($formatShort, $periodDate->timestamp));            $dates->push([                'label' => $periodDateName,                'label_short' => $periodDateNameShort,                'date' => $periodDate->format('Y-m-d'),                'short' => $periodDate->format($intervalConfiguration['short'])            ]);            $categories[] = $periodDateName;        }        // Consulta agrupando y enlazando        $services = $team->services()            ->select('users.id as user_id')            ->selectRaw('CONCAT(users.first_name, " ", users.last_name) as user_name')            ->selectRaw("DATE_FORMAT(services.created_at,'%Y-%m-%d') as date")            ->selectRaw("DAYOFYEAR(services.created_at) as day")            ->selectRaw("WEEK(services.created_at) as week")            ->selectRaw("MONTH(services.created_at) as month")            ->selectRaw('COUNT(services.id) as counter')            ->join('service_user', function ($join) {                return $join->on('services.id', '=', 'service_user.service_id');            })            ->join('users', 'service_user.user_id', '=', 'users.id')            ->whereBetween('services.created_at', [$from->toDateString(), $to->toDateString()])            ->groupBy('users.id', $groupBy)            ->get();        // Iterando las fechas para crear el data de la tabla        $dates->each(function ($date, $key) use (&$table, &$series, $services, $groupBy) {            $valueToFilter = (int)$date['short'];            $servicesFiltered = $services->where($groupBy, $valueToFilter);            $data = [                'id' => $key,                'date' => $date['label']            ];            $servicesFiltered->each(function ($service) use ($table, &$data) {                $key = camel_case($service->user_name);                // Agregando columna a la tabla si no existe                $search = $table['columns']->where('field', $key)->isEmpty();                if ($search) {                    $table['columns']->push([                        'title' => $service->user_name,                        'field' => $key,                        'width' => 200                    ]);                }                $data[$key] = $service->counter;            });            $table['data'][] = $data;            // Agregando categoría a series            $series['categories'][] = $date['label_short'];        });        $table['columns']->each(function ($column) use ($dates, $series, $services, $groupBy) {            if ($column['field'] != 'date') {                $servicesFiltered = $services->where('user_name', $column['title']);                $series['data']->push([                    'name' => $column['title'],                    'data' => $dates->map(function ($date) use ($servicesFiltered, $groupBy) {                        $valueToFilter = (int)$date['short'];                        return $servicesFiltered->where($groupBy, $valueToFilter)->sum('counter');                    })                ]);            }        });        // Transformando colección a array        $table['columns'] = $table['columns']->toArray();        $series['data'] = $series['data']->toArray();        // Arreglando data para los valores en ceros        foreach ($table['data'] as &$tableDataItem) {            foreach ($table['columns'] as $tableColumn) {                if (!array_key_exists($tableColumn['field'], $tableDataItem)) {                    $tableDataItem[$tableColumn['field']] = 0;                }            }        }        return $this->response->array([            'table' => $table,            'series' => $series        ]);    }    /**     * @param Request $request     * @param Team $team     * @return mixed     */    public function users(Request $request, Team $team)    {        $start = new Carbon($request->get('start'));        $end = new Carbon($request->get('end'));        $users = $team->users()->whereHas('roles', function ($query) {            return $query->where('slug', 'rutero');        })->get();        $series = $users->lists('id')->toArray();        $labels = [];        $labelsToShow = [];        $data = [];        // Setteando los meses como labels        $period = new \DatePeriod($start, new \DateInterval('P1M'), $end);        foreach ($period as $periodDate) {            $labels[] = $periodDate->format('Y-n');            $labelsToShow[] = ucfirst(strftime('%b, %Y', $periodDate->timestamp));        }        foreach ($series as $serie) {            $data[$serie] = [];            foreach ($labels as $label) {                $data[$serie][$label] = 0;            }        }        $services = $team->services()            ->select('users.id as user_id')            ->selectRaw('YEAR(services.created_at) as created_at_year')            ->selectRaw('MONTH(services.created_at) as created_at_month')            ->selectRaw('COUNT(services.id) as count')            ->join('services_assignments', function ($join) {                return $join->on('services.id', '=', 'services_assignments.service_id')->where('accepted', '=', 0);            })            ->join('users', 'services_assignments.user_id', '=', 'users.id')            ->whereBetween('services.created_at', [$start->toDateString(), $end->toDateString()])            ->groupBy('users.id', 'created_at_year', 'created_at_month')            ->get();        foreach ($services as $service) {            $label = "{$service->created_at_year}-{$service->created_at_month}";            $data[(int)$service->user_id][$label] = $service->count;        }        $seriesToShow = $users->lists('first_name')->toArray();        return $this->response->array([            'series' => $seriesToShow,            'labels' => $labelsToShow,            'data' => array_values(array_map('array_values', $data))        ]);    }    /**     * @param Request $request     * @return mixed     */    public function polls(Request $request)    {        $team = $this->getTeam($request);        $from = new Carbon($request->get('from'));        $to = new Carbon($request->get('to'));                //bug agrupacion        $groupBy = $request->get('group');        $intervalConfiguration = self::INTERVAL_CONFIGURATION[$groupBy];        setLang();        $dates = collect([]);        $categories = [];        $series = [            'categories' => [],            'data' => collect([])        ];        $table = [            'columns' => collect([                [                    'field' => 'usuario',                    'title' => Lang::get('app.USUARIOS'),                    'width' => 220,                    'locked' => true                ],[                    'field' => 'date',                    'title' => Lang::get('app.FECHA'),                    'width' => 220,                    'locked' => true                ]                ,[                    'field' => 'url',                    'title' => 'Url',                    'width' => 0,                    'locked' => false,                    'template'=>"#: url #"                ],[                    'field' => 'service',                    'title' => Lang::get('app.SERVICIO').' #',                    'width' => 220,                    'locked' => false,                    'template'=>"<a target='_blank' href='#: url #'>#: service # </a>"                ]            ]),            'data' => []        ];        /*$period = new \DatePeriod($from, new \DateInterval("P1{$intervalConfiguration['interval']}"), $to);        foreach ($period as $periodDate) {            $periodDateName = ucfirst(strftime($intervalConfiguration['format'], $periodDate->timestamp));            $periodDateNameShort = ucfirst(strftime($intervalConfiguration['format_short'], $periodDate->timestamp));            $dates->push([                'label' => $periodDateName,                'label_short' => $periodDateNameShort,                'date' => $periodDate->format('Y-m-d'),                'short' => $periodDate->format($intervalConfiguration['short'])            ]);            $categories[] = $periodDateName;        }*/        // Consulta agrupando y enlazando                //questions        $questions = $team->polls()            ->select('*')            ->selectRaw('polls_questions.id as question_id')            ->selectRaw('CONCAT(polls.name, " - ", polls_questions.question) as user_name')            //->select('users.id as user_id')            //->selectRaw('CONCAT(users.first_name, " ", users.last_name) as user_name')            //->selectRaw("DATE_FORMAT(services.created_at,'%Y-%m-%d') as date")            //->selectRaw("DAYOFYEAR(services.created_at) as day")            //->selectRaw("WEEK(services.created_at) as week")            //->selectRaw("MONTH(services.created_at) as month")            //->selectRaw('COUNT(services.id) as counter')            ->join('polls_questions', function ($join) {                return $join->on('polls.id', '=', 'polls_questions.poll_id');            })            //->join('polls_questions', 'polls_questions.poll_id', '=', 'polls.id')            //->where('polls.is_active','=',1)            //->whereBetween('polls.created_at', [$from->toDateString(), $to->toDateString()])            //->groupBy('users.id', $groupBy)            ->get();        $polls = $team->polls()            ->select('*')            ->selectRaw('customers.id as customer_id')            ->selectRaw('CONCAT(customers.first_name, " ", customers.last_name) as user_name')            ->selectRaw('CONCAT(customers.first_name) as name')            ->selectRaw('polls_answers.id as answer_id')            ->selectRaw('polls_answers.created_at as created_at_answer')            ->selectRaw('services.code as service_code')            ->selectRaw('teams.slug as team_slug')            //->select('users.id as user_id')            //->selectRaw('CONCAT(users.first_name, " ", users.last_name) as user_name')            //->selectRaw("DATE_FORMAT(services.created_at,'%Y-%m-%d') as date")            //->selectRaw("DAYOFYEAR(services.created_at) as day")            //->selectRaw("WEEK(services.created_at) as week")            //->selectRaw("MONTH(services.created_at) as month")            //->selectRaw('COUNT(services.id) as counter')            ->join('polls_answers', function ($join) {                return $join->on('polls.id', '=', 'polls_answers.poll_id');            })            ->join('services', function ($join) {                return $join->on('services.id', '=', 'polls_answers.service_id');            })            ->join('teams', function ($join) {                return $join->on('teams.id', '=', 'services.team_id');            })            ->join('customers', 'customers.id', '=', 'polls_answers.customer_id')            //->where('polls.is_active','=',1)            ->whereBetween('polls_answers.created_at', [$from->toDateString(), $to->toDateString()])            //->groupBy('users.id', $groupBy)            ->get();        if($polls){            foreach ($polls as $poll) {                $dates->push([                    'label' => $poll->user_name,                    'label_short' => $poll->question_id,                    'date' => str_slug($poll->created_at,'_'),                    'created_at' => \Carbon\Carbon::parse($poll->created_at_answer)->format('Y-m-d'),                    'url' => url($poll->team_slug.'#/asignaciones/'.Hashids::encode($poll->service_id)),                    'service' => $poll->service_code,                    'short' => $poll->answer_id                ]);                $categories[] = $poll->user_name;            }        }        // Iterando las fechas para crear el data de la tabla        $dates->each(function ($date, $key) use (&$table, &$series, $polls, $questions, $groupBy) {            $valueToFilter = (int)$date['short'];            //$servicesFiltered = $polls->where($groupBy, $valueToFilter);            $servicesFiltered = $questions;            $data = [                'id' => $key,                //'date' => str_slug($date['label'],'_'),                //'date' => str_slug($date['label'],'_'),                'usuario' => $date['label'],                    'date' => $date['created_at'],                  'service' => $date['service'],                    'url' => $date['url'],                    //'service' => '=HYPERLINK("http:www.google.com","Click for Google")',                ];            $servicesFiltered->each(function ($polls) use ($table, &$data,$valueToFilter) {                //$key = camel_case($polls->user_name);                $key = str_slug($polls->user_name,'_');                // Agregando columna a la tabla si no existe                $search = $table['columns']->where('field', $key)->isEmpty();                if ($search) {                    $table['columns']->push([                        'title' => $polls->user_name,                        'field' => $key,                        'width' => 200                    ]);                }                $answer = PollAnswerOption::where('poll_answer_id','=',$valueToFilter)                                ->where('poll_question_id','=',$polls->question_id)                                ->first();                $option_id = @$answer->poll_option_id?:'';                                if($option_id){                    $value = @PollOption::find($option_id)->option?:'';                }else{                    $value = @$answer->answer?:'';                }                $data[$key] = $value;            });            $table['data'][] = $data;            // Agregando categoría a series            $series['categories'][] = str_slug($date['label_short'],'_');        });        $table['columns']->each(function ($column) use ($dates, $series, $polls, $groupBy) {            if ($column['field'] != 'date') {                $servicesFiltered = $polls->where('user_name', $column['title']);                $series['data']->push([                    'name' => $column['title'],                    'data' => $dates->map(function ($date) use ($servicesFiltered, $groupBy) {                        $valueToFilter = (int)$date['short'];                        return $servicesFiltered->where($groupBy, $valueToFilter)->sum('counter');                    })                ]);            }        });        // Transformando colección a array        $table['columns'] = $table['columns']->toArray();        $series['data'] = $series['data']->toArray();        // Arreglando data para los valores en ceros        foreach ($table['data'] as &$tableDataItem) {            foreach ($table['columns'] as $tableColumn) {                if (!array_key_exists($tableColumn['field'], $tableDataItem)) {                    $tableDataItem[$tableColumn['field']] = 0;                }            }        }        return $this->response->array([            'table' => $table,            'series' => $series        ]);    }}